def clean_words(text):
# Adds word or its part with letters to dictionary
# key - key to be added; val - value to be added; d - dictionary, letters - list of characters to add before or after key and val; before_key - add letters before (1) or after (0) key or val. 
    def add_letters(key, val, d, letters=[""], before_key=0):
        if before_key:
            for i in letters:
                d[i+key] = i+val
        else:
            for i in letters:
                d[key+i] = val+i
        return d

# Replaces words/substrings with starting or ending characters can be in front of words in a given text.
# key - word or its part to be transform; val - word or its part to be transform to; text - text to transform; starts_ends - add characters that are before or after word ("1" for adding them in front, "2" at the end, "0" before and after word) 
    def starts_ends_with(key, val, text, starts_ends=0):
        text = " " + text + " "
        s_list = [" ", "(", "[", '"', "/", "\n", "\t"] if starts_ends == 1 or starts_ends == 0 else [""]
        e_list = [" ", ",", ".", "!", "?", ":", ";", ")", "]", "/", "\n", "\t"] if starts_ends == 2 or starts_ends == 0 else [""]

        for s in s_list: 
            for e in e_list:
                text = text.replace(s + key + e, s + val + e)
                if starts_ends != 2:
                    symb_list = ["‚åÇ", "‚òº", "ìÄ†", "ìÄ°", "ìÄ¢", "ìÄ£", "ìÄ§", "ìÄ•", "ìÄÄ", "ìÄÅ", "ìÄÇ", "ìÄÉ", "ìÄê", "ìÄë", "ìÄí", "ìÄì", "ìÄî", "ìÄï", "ìÄâ", "ìÄä", "ìÄã", "ìÄû", "ìÄü", "ìÅç", "ìÅé", "ìäÄ", "ìäÅ", "ìäÇ", "ìäÉ", "ìäÑ", "ìäÖ", "ìäÜ", "ìäá", "ìäà", "ìäâ", "ìää", "ìäã", "ìäå", "ìäç", "ìäé", "ìäè", "ìäê", "ìäë", "ìäí", "ìäì", "ìäî", "ìäï", "ìäñ", "ìäó", "ìäò", "ìäô", "ìäö", "ìäõ", "ìäú", "ìäù", "ìäû", "ìäü", "ìÅè", "ìÅ®", "ìÅã", "ìÅÑ", "ìÅÅ", "ìè†", "ìè°", "ìè¢", "ìè£", "ìè§", "ìè•", "ìè¶", "ìèß", "ìè®", "ìè©", "ìè™", "ìè´", "ìè¨", "ìè≠", "ìèÆ", "ìèØ", "ìè∞", "ìè±", "ìè≤", "ìè≥", "ìè¥", "ìèµ", "ìè∂", "ìè∑", "ìè∏", "ìèπ", "ìè∫", "ìèª", "ìèº", "ìèΩ", "ìèæ", "ìèø", "ìêÄ", "ìêÅ", "ìêÇ", "ìêÉ", "ìêÑ", "ìêÖ", "ìêÜ", "ìêá", "ìêà", "ìêâ", "ìêä", "ìêã", "ìêå", "ìêç", "ìêé", "ìêè"]
                    if not any([key.istitle(), key[0] in symb_list, key[0] == " "]):
                        text = text.replace(s + ("Íû®" if key[0] == "·∫ú" else "S" if key[0] == "≈ø" else key[0].capitalize())+key[1:] + e, s + ("Íû®" if val[0] == "·∫ú" else "S" if val[0] == "≈ø" else val[0].capitalize())+val[1:] + e)
        return text[1:-1]

# Adds exceptions for word transformation.
# e_list - list of words that will be added in dictionary; d - dictionary in witch exceptions will be added; decode - codes/decodes exceptions with symbol.
# Example (transforms all "f" into "·∫ú", except word "febr"):
#   exceptions(["febr"], d, 0)            output: d = {"febr":"ìÄ†"}
#   d.update({"f": "·∫ú"})                  output: d = {"febr":"ìÄ†", "f":"·∫ú"}
#   exceptions(["febr"], d, 1)            output: d = {"febr":"ìÄ†", "f":"·∫ú", "ìÄ†":"febr"}
# Symbols: https://www.fileformat.info/info/unicode/block/egyptian_hieroglyphs/utf8test.htm
    def exceptions(e_list, d, decode):
        e_list_title = []
        for i in e_list:
            if i[0] == " ":
                continue
            if i[0]=="·∫ú":
                e_list_title.append("Íû®"+i[1:])
            elif i[0]=="≈ø":
                e_list_title.append("S"+i[1:])
            else:
                e_list_title.append(i.capitalize())
        e_list = e_list_title + e_list
        
        symb_list = ["ìÄ†", "ìÄ°", "ìÄ¢", "ìÄ£", "ìÄ§", "ìÄ•", "ìÄÄ", "ìÄÅ", "ìÄÇ", "ìÄÉ", "ìÄê", "ìÄë", "ìÄí", "ìÄì", "ìÄî", "ìÄï", "ìÄâ", "ìÄä", "ìÄã", "ìÄû", "ìÄü", "ìÅç", "ìÅé", "ìäÄ", "ìäÅ", "ìäÇ", "ìäÉ", "ìäÑ", "ìäÖ", "ìäÜ", "ìäá", "ìäà", "ìäâ", "ìää", "ìäã", "ìäå", "ìäç", "ìäé", "ìäè", "ìäê", "ìäë", "ìäí", "ìäì", "ìäî", "ìäï", "ìäñ", "ìäó", "ìäò", "ìäô", "ìäö", "ìäõ", "ìäú", "ìäù", "ìäû", "ìäü", "ìÅè", "ìÅ®", "ìÅã", "ìÅÑ", "ìÅÅ", "ìè†", "ìè°", "ìè¢", "ìè£", "ìè§", "ìè•", "ìè¶", "ìèß", "ìè®", "ìè©", "ìè™", "ìè´", "ìè¨", "ìè≠", "ìèÆ", "ìèØ", "ìè∞", "ìè±", "ìè≤", "ìè≥", "ìè¥", "ìèµ", "ìè∂", "ìè∑", "ìè∏", "ìèπ", "ìè∫", "ìèª", "ìèº", "ìèΩ", "ìèæ", "ìèø", "ìêÄ", "ìêÅ", "ìêÇ", "ìêÉ", "ìêÑ", "ìêÖ", "ìêÜ", "ìêá", "ìêà", "ìêâ", "ìêä", "ìêã", "ìêå", "ìêç", "ìêé", "ìêè"]
        if len(e_list) > len(symb_list):
            symb_list = ["‚åÇ"+i for i in symb_list] + ["‚òº"+i for i in symb_list] 
            
        i = 0
        if not decode:
            for key in e_list:
                d[key] = symb_list[i]
                i += 1
        else:
            for key in e_list:
                d[symb_list[i]] = key
                i += 1
        return d
            
    prefixes = ['Jahap', 'Jahat', 'Jahno', 'Jahsa', 'Jahais', 'Jahai≈ø', 'jahais', 'jahai≈ø', 'Jahis', 'Jahi≈ø', 'jahis', 'jahi≈ø', 'jahap', 'jahat', 'jahno', 'Jahpahr', 'jahpahr', 'Jahpa', 'jahpa', 'Jahpee', 'jahpee', 'Jahee', 'jahee', 'jahsa', 'Jahus', 'Jahu≈ø', 'jahus', 'jahu≈ø', 'jah·∫úa', 'Jah·∫úa', 'Neap', 'Neat', 'Neno', 'Nesa', 'Neais', 'Neai≈ø', 'neais', 'neai≈ø', 'Neis', 'Nei≈ø',  'neis', 'nei≈ø', 'neap', 'neat', 'neno', 'Nepahr', 'nepahr', 'Nepa', 'nepa', 'Nepee', 'nepee', 'Neee', 'neee', 'nesa', 'Neus', 'Neu≈ø', 'neus', 'neu≈ø', 'ne·∫úa', 'Ne·∫úa', 'Ap', 'At', 'Bes', 'Be≈ø', 'Jah', 'jah', 'Ne', 'ne', 'No', 'Sa', 'Ais', 'Ai≈ø', 'ais', 'ai≈ø', 'Is', 'I≈ø', 'is', 'i≈ø', 'ap', 'at', 'bes', 'be≈ø', 'no', 'Pahr', 'pahr', 'Pa', 'pa', 'Pee', 'pee', 'Ee', 'ee', 'sa', 'Us', 'U≈ø', 'us', 'u≈ø', '·∫úa', 'Íû®a']
    vowels = ["a", "e", "i", "oh", "o", "u"]
    flexions_n_f = ["ahm", "ahs", "as", "ai", "u", "ah", "a"]
    flexions_n_m = ["ohs", "eem", "am", "ah", "us", "os", "oh", "o", "u", "s", "a", "i", ""]
    flexions_n_mf = ["ohs", "eem", "ahm", "ahs", "am", "ah", "ai", "os", "us", "as", "oh", "o", "u", "s", "a", "i", ""]
    flexions_a_m = ["ajahm", "ajahs", "ajohs", "ajeem", "ajam", "ajah", "ajos", "ajai", "ais", "ohs", "ahs", "ah", "oh", "ee", "os", "o"]
    flection_a_f = ["ehm", "ehs", "es", "ei", "eh", "e", "i", ]

    flexions_v_ = ["ehju", "ahm", "aht", "am", "u", "i", "a", ""]
    flexions_v_I = ['inu', 'inaht', 'inahm', 'ina', 'ih·∫úim', 'ih·∫úeet', 'ih·∫úi', 'ih·∫úchu', 'ihsim', 'ihseet', 'ihsi', 'ihschu', 'ihs', 'enu', 'enat', 'enam', 'en']
    flexions_v_II = ['·∫úim', '·∫úeet', '·∫úi', '·∫úchu', 't', 'sim', 'seet', 'si', 'schu', 's', 'ju', 'ji', 'jat', 'jam', 'jaht', 'jahm', 'ja']
    flexions_v_III = ['·∫úimees', '·∫úeetees', '·∫úees', '·∫úchos', 'simees', 'simees', 'seetees', 'sees', 'schos', 'jos', 'jees', 'jahtees', 'jahs', 'jahmees', 'damees']

    # https://www.lviap.lv/grammar/verbs/konjugacija/
    # https://laacz.lv/tmp/loc.php?

    vd0 = {
        "ƒÅ": "ah",
        "ƒì": "eh",
        "ƒ´": "ih",
        "≈´": "uh",
        "≈ü": "·∫ú",
        "≈û": "Íû®",
    }
    exc = [" fm", " fon", " of ", " fakt", "fah≈ø", "fani", "fakult", "fabul", "fant", "fize", "feder", "fasahd", "fa·∫úahd", "fafahd", "festi", "fefti", "fe·∫úti", "finahl", "finan", "fili", "film", "firm", "fi≈øik", "form", "foto", "folkhl", "futb", "funkz", "front", "florenz", "flahz", "ahfrik", "draft", "defiz", "efekt", "infra", "infekzij", "kafij", "katastrof", "kataftrof", "kata·∫útrof", "koef", "konflikt", "naft", "ofizi", "prof", "rudolf", "ruhdolf", "sfehr", "·∫úfehr", "ffehr", " wef", " alfa", "asfalt", "affalt", "a·∫úfalt", "fran", " fr.", "febr", "friz", "fritsch", "frid", "frie", "freil", "nfrei", "freib", "freim", "feld", "firzk", "fabrik", "falzgr"]
    exc = exc + ["schihd", "schira"]
    exceptions(exc, vd0, 0)
    vd0.update({
            "ferti": "ìêß",
            "ferwi": "ìê®",    #serviss
            "ferb": "ìê©",
        "fer": "ìê¶",
            "ìêß": "·∫úerti",
            "ìê®": "·∫úerwi",
            "ìê©": "·∫úerb",

            "lafik": "ìê™",
            "lasfik": "ìê§",
            "laffik": "ìê§",
            "la·∫úfik": "ìê§",
            "ekfik": "ìê´",    #Meksika
            "fiksn": "ìê¨",
            "fikfn": "ìê¨",
            "fik·∫ún": "ìê¨",
        "fik": "ìê•",      #identifik grafik kwalifik klasifik kla·∫úifik sertifik ·∫úertifik
            "ìê™": "la·∫úik",
            "ìê§": "la·∫ú·∫úik",
            "ìê´": "ek·∫úik",
            "ìê¨": "·∫úik·∫ún",
    "f": "·∫ú",
        "ìê¶": "fer",
        "ìê•": "fik",

        " arveen": "ìê≠",
        " Arveen": "‚ô¶ìê¶",
        "nervu": "ìêÆ",
        "Nervu": "‚ô¶ìê•",
        "orvehƒ£": "ìê£",
    "rv": "w",
        "ìê≠": " arween",
        "‚ô¶ìê¶": " Arween",
        "ìêÆ": "nerwu",
        "‚ô¶ìê•": "Nerwu",
        "ìê£": "orwehƒ£",
        
        "eƒºved": "ìê¢",
        "eemeƒºv": "ìêê",
        "auruƒºvad": "ìêë",
        "uƒºve": "ìêí",
        "pƒºveid": "ìêì",
        "araƒºv": "ìêî",
    "ƒºv": "w",
        "ìê¢": "eƒºwed",
        "ìêê": "eemeƒºw",
        "ìêë": "auruƒºwad",
        "ìêí": "uƒºwe",
        "ìêì": "pƒºweid",
        "ìêî": "araƒºw",

    "vv": "w",

    " sa - ": " ·∫úa",
    " sa -": " ·∫úa",
    " sa ‚Äì ": " ·∫úa",
    " sa ‚Äì": " ·∫úa",

    " ro - ": " ro",
    " ro -": " ro",
    " ro ‚Äì ": " ro",
    " ro ‚Äì": " ro",

    ", ro ": ", ko ",
    " ro ": " no ",

    "√§": "√¢",
    "q": "g",
    "&gt;≈Ü": "i≈Ü",
    "&gt;": ", ",
    ">": ", ",
    "v. t.": "u. t.",
    "v. z.": "u. z.",
    "sch": "·∫úch",
    })
    exceptions(exc, vd0, 1)
    vd0.update({
    "fafahd": "fa·∫úahd",
    "fasahd": "fa·∫úahd",
    "fefti": "fe·∫úti",
    "festi": "fe·∫úti",
    "kataftrof": "kata·∫útrof",
    "katastrof": "kata·∫útrof",
    "ffehr": "·∫úfehr",
    "sfehr": "·∫úfehr",
    "affalt": "a·∫úfalt",
    "asfalt": "a·∫úfalt",
    })

    vd_s_e_with = {}
    # add_letters("minn", "wi≈Ü≈Ü", vd_s_e_with, ["eem", "ahm", "ahs", "·∫úch", "ai", "as", "ah", "am", "us", "os", "ohs", "i", "a", "u"])
    # add_letters("mi≈Ü≈Ü", "wi≈Ü≈Ü", vd_s_e_with, ["eem", "ahm", "ahs", "·∫úch", "ai", "as", "ah", "am", "us", "os", "ohs", "i", "a", "u"])
    # add_letters("winn", "wi≈Ü≈Ü", vd_s_e_with, ["eem", "ahm", "ahs", "·∫úch", "ai", "as", "ah", "am", "us", "os", "ohs", "i", "a", "u"])
    # add_letters("min", "wi≈Ü", vd_s_e_with, ["eem", "ahm", "ahs", "·∫úch", "ai", "as", "ah", "am", "us", "os", "ohs", "i", "a", "u"])
    # add_letters("mi≈Ü", "wi≈Ü", vd_s_e_with, ["eem", "ahm", "ahs", "·∫úch", "ai", "as", "ah", "am", "us", "os", "ohs", "i", "a", "u"])
    # add_letters("win", "wi≈Ü", vd_s_e_with, ["eem", "ahm", "ahs", "·∫úch", "ai", "as", "ah", "am", "us", "os", "ohs", "i", "a", "u"])
    # exceptions(["Marek", "marato", "Marato"], vd_s_e_with, 0)
    # add_letters("nemar", "newar", vd_s_e_with, ["eh·∫úchu", "ehjahm", "ehjaht", "ehseet", "eh·∫úeet", "ehsim", "eh·∫úim", "ehtu", "ehju", "ehji", "ehsi", "eh·∫úi", "ehja", "eet", "ehs", "eht", "am", "at", "ot", "oht", "u", "i", ""] )
    # add_letters("nemarr", "newarr", vd_s_e_with, ["eh·∫úchu", "ehjahm", "ehjaht", "ehseet", "eh·∫úeet", "ehsim", "eh·∫úim", "ehtu", "ehju", "ehji", "ehsi", "eh·∫úi", "ehja", "eet", "ehs", "eht", "am", "at", "ot", "oht", "u", "i", ""] )
    # add_letters("mar", "war", vd_s_e_with, ["eh·∫úchu", "ehjahm", "ehjaht", "ehseet", "eh·∫úeet", "ehsim", "eh·∫úim", "ehtu", "ehju", "ehji", "ehsi", "eh·∫úi", "ehja", "eet", "ehs", "eht", "am", "at", "ot", "oht", "u", "i", "", "as", "a"] )
    # add_letters("marr", "warr", vd_s_e_with, ["eh·∫úchu", "ehjahm", "ehjaht", "ehseet", "eh·∫úeet", "ehsim", "eh·∫úim", "ehtu", "ehju", "ehji", "ehsi", "eh·∫úi", "ehja", "eet", "ehs", "eht", "am", "at", "ot", "oht", "u", "i", "", "as", "a"] )
    # exceptions(["Marek", "marato", "Marato"], vd_s_e_with, 1)
    add_letters("miss", "wi·∫ú", vd_s_e_with, flexions_n_f+["am", "iem", "i", "us", "os", "ohs"])
    add_letters("wiss", "wi·∫ú", vd_s_e_with, flexions_n_f+["am", "iem", "i", "us", "os", "ohs"])
    add_letters("mi·∫ú·∫ú", "wi·∫ú", vd_s_e_with, flexions_n_f+["am", "iem", "i", "us", "os", "ohs"])
    add_letters("wi·∫ú·∫ú", "wi·∫ú", vd_s_e_with, flexions_n_f+["am", "iem", "i", "us", "os", "ohs"])
    add_letters("pus", "pu·∫ú", vd_s_e_with, flection_a_f)
    add_letters("sam", "·∫úaw", vd_s_e_with, flexions_n_mf[:-1])
    add_letters("·∫úam", "·∫úaw", vd_s_e_with, flexions_n_mf[:-1])
    add_letters("samehj", "·∫úawehj", vd_s_e_with, flexions_n_mf[:-1])
    add_letters("·∫úamehj", "·∫úawehj", vd_s_e_with, flexions_n_mf[:-1])
    add_letters("ma·∫ú", "ma≈ø", vd_s_e_with, flexions_a_m[:8]+flexions_n_mf+["ais", "ee"])
    add_letters("mas", "ma≈ø", vd_s_e_with, flexions_a_m[:8]+flexions_n_mf+["ais", "ee"])
    add_letters("ma·∫úahk", "ma≈øahk", vd_s_e_with, flexions_a_m[:8]+flexions_n_mf+["ais", "ee"])
    add_letters("masahk", "ma≈øahk", vd_s_e_with, flexions_a_m[:8]+flexions_n_mf+["ais", "ee"])
    add_letters("ma·∫úak", "ma≈øak", vd_s_e_with, flexions_a_m[:8]+flexions_n_mf+["ais", "ee"])
    add_letters("masak", "ma≈øak", vd_s_e_with, flexions_a_m[:8]+flexions_n_mf+["ais", "ee"])
    add_letters("dim", "diw", vd_s_e_with, ["desmit", "ahm", "ahs", "ohs", "eem", "as", "am", "ah", "us", "os", "u", "a", "i"])
    add_letters("drauds", "draud≈ø", vd_s_e_with, flection_a_f)
    add_letters("draud·∫ú", "draud≈ø", vd_s_e_with, flection_a_f)
    vd_s_e_with.update({
	    "mehds": "mehd≈ø",
	    "nemehds": "nemehd≈ø",
        "miss": "wi·∫ús",
        "mi·∫ú·∫ú": "wi·∫ús",
        "mi·∫ús": "wi·∫ús",
        "wiss": "wi·∫ús",
        "wi·∫ú·∫ú": "wi·∫ús",
        "mis": "wis",
        "het": "bet",
        'mairs': 'wairs',
        "maj": "waj",
        'mahs': 'ma≈ø',
        'nemahs': 'nema≈ø',
        "moi": "waj",
        "woi": "waj",
        "nam": "naw",  
        "neds": "ned≈ø",
        "·∫úchi": "·∫úchih",
        "uu": "un",
        "u≈Ü": "un",
        "ro": "to",
        "ƒºa": "ka",
        "ue": "ne",
        "ns": "us",
        "uo": "no",
        "jam": "jaw",
        "mai": "wai",
        "uav": "naw",
        "pchc": "pehc",
        'tadehl': 'tahdehƒº',
        "ta": "tah",
        'sameem': '·∫úaweem',
        'nav': 'naw',
    	"neka": "nekah",
        'lihds': 'lihd≈ø',
        "lihhs": "lihd≈ø",
        "llhds": "lihd≈ø",
        'gandrihs': 'gandrih≈ø',
        'gadƒÅ': 'gad√¢',
        'drihs': 'drih≈ø',
        'dimi': 'diwi',
        'dee·∫úgan': 'dee≈øgan',
        'deesgan': 'dee≈øgan',
        "pilnigi": "pilnihgi",
        "melti": "welti",
        "temihm": "tewihm",
        "temih": "tewih",
        "tem": "tew",
        "tehmam": "tehwam",
        "tehma": "tehwa",
        "tehmu": "tehwu",
        "tehms": "tehws",
        "tehmi": "tehwi",
        "mehl": "wehl",
        "mehls": "wehls",
        'mehlu': "wehlu",
    })

    vd_s_with = {}
    exceptions(["winnes", "wines", "mission", "mi·∫ú·∫úion", "Marek", "marato", "bee·∫úchu"], vd_s_with, 0)
    vd_s_with.update({
        "Jnd": "Ind",
        "Iclg": "Jelg",
        'Jelgam': 'Jelgaw',         
        "Jgg": "Ig",            #Igau≈Üi
        "pce": "pee",
        "ƒ¢ch": "Íû®ch",

        "minn": "wi≈Ü≈Ü",
        "mi≈Ü≈Ü": "wi≈Ü≈Ü",
        "winn": "wi≈Ü≈Ü",
        "min": "wi≈Ü",
        "mi≈Ü": "wi≈Ü",
        "win": "wi≈Ü",

        "nahm": "nahw",
        "nonahm": "nonahw",
        "saƒ∑ƒ∑": "≈øaƒ∑",
        "·∫úaƒ∑ƒ∑": "≈øaƒ∑",
        "seƒ∑ƒ∑": "≈øeƒ∑",
        "·∫úeƒ∑ƒ∑": "≈øeƒ∑",

        "·∫ú·∫úrihmer": "·∫úkrihwer",
        "ssrihmer": "·∫úkrihwer",
        "·∫ú·∫úrihwer": "·∫úkrihwer",
        "ssrihwer": "·∫úkrihwer",

        "·∫ú·∫úohl": "·∫úkohl",
        "ma·∫ú·∫úar": "wa·∫úar",

        "miss": "wi·∫ú·∫ú",
        "wiss": "wi·∫ú·∫ú",
        "mi·∫ú·∫ú": "wi·∫ú·∫ú",
        "pamiss": "pawi·∫ú·∫ú",
        "pawiss": "pawi·∫ú·∫ú",
        "pami·∫ú·∫ú": "pawi·∫ú·∫ú",
        "mis": "wi·∫ú",
        "mi·∫ú": "wi·∫ú",
        "wis": "wi·∫ú",
        "pamis": "pawi·∫ú",
        "pami·∫ú": "pawi·∫ú",
        "pawis": "pawi·∫ú",

        "mairak": "wairahk",
        "mairahk": "wairahk",
        "mihr": "wihr",
        "mahrd": "wahrd",
        "luhs": "juhs",
        # "meesch≈Ü": "wee·∫úch≈Ü",
        "mee·∫úch≈Ü": "wee·∫úch≈Ü",
        # "meesch": "mee≈øch",
        "mee·∫úch": "mee≈øch",
        # "kroeesch": "kwee·∫úch",
        "kroee·∫úch": "kwee·∫úch",
        "Oeew": "Deew",
        "deewtalpo": "deewkalpo",
        "deewkaloo": "deewkalpo",
        "lecp": "leep",
        "dahrs": "dahr≈ø",
        "leelak": "leelahk",
        "leepaj": "leepahj",
        "kuldig": "kuldihg",
        "maldib": "waldib",
        "maldihb": "waldihb",
        "malde": "walde",
        'malo': 'walo',
        'mallo': 'wallo',

        'grahmj': 'grahwj',
        'gluschi': 'glu≈øchi',
        'glu·∫úchi': 'glu≈øchi',

        "kurscm": "kur≈øem",
        "kur·∫úcm": "kur≈øem",

        "kurscb": "kur·∫úch",
        "kur·∫úcb": "kur·∫úch",

        "kursck": "kur·∫úch",
        "kur·∫úck": "kur·∫úch",

        "kurscem": "kur·∫úeem",
        "kur·∫úcem": "kur·∫úeem",

        "smeht": "·∫úweht",
        "Dezemben": "Dezember",
        'zilmek': 'zilwek',
        'temi': 'tewi',
        'tama': 'tawa',
        'tadehl': 'tahdehƒº',
        'stipr': '·∫útipr',
        'sirg': '≈øirg',
        '·∫úirg': '≈øirg',
        'pulkst': 'pulk·∫út',
        'mui·∫úch': 'mui≈øch',
        'muhsu': 'muh·∫úu',
        'mainad≈øi≈Ü': 'wainad≈øi≈Ü',
        'latm': 'latw',
        'ihst': 'ih·∫út',
        'neihst': 'neih·∫út',
        'esso': 'e·∫ú·∫úo',
        'esot': 'e·∫úot',
        'neesso': 'nee·∫ú·∫úo',
        'neeso': 'nee·∫úo',
        "ds": "d≈ø",
        'esmu': 'e·∫úmu',
        'neesmu': 'nee·∫úmu',
        'd≈øhim': 'd≈øihw',
        'ned≈øhim': 'ned≈øihw',
            "deem≈øch": "ìê™",
            "diem≈øch": "ìê©",
        'deem': 'deew',
        'deem': 'deew',
            "ìê™": "deem≈øch",
            "ìê©": "deem≈øch",
        'dauds': 'daud≈ø',
        'nedauds': 'nedaud≈ø',
        'ba·∫úni': 'ba≈øni',
        'basni': 'ba≈øni',
        'ba≈øni': 'ba≈øni',
        'awi·∫ú': 'awih≈ø',
        'awis': 'awih≈ø',
        'dmesel': 'dwehsel',
	    'Rig': "Rihg",
        'nemar': 'newar',
        'jahmar': 'jahwar',
        'mar': "war",

        'sin': '≈øin',
        '·∫úin': '≈øin',
        'nesin': 'ne≈øin',
        'ne·∫úin': 'ne≈øin',
        'pasin': 'pa≈øin',
        'pa·∫úin': 'pa≈øin',
        
        'sasi≈Ü': 'sa≈øi≈Ü',
        'sa·∫úi≈Ü': 'sa≈øi≈Ü',
        '·∫úasi≈Ü': '·∫úa≈øi≈Ü',
        '·∫úa·∫úi≈Ü': '·∫úa≈øi≈Ü',
        
        'nepasin': 'nepa≈øin',
        'nepa·∫úin': 'nepa≈øin',
        'jahsin': 'jah≈øin',
        'jah·∫úin': 'jah≈øin',
        'jahpasih': 'jahpa≈øih',
        'jahpa·∫úih': 'jahpa≈øih',

        'si≈Ü': '≈øi≈Ü',
        '·∫úi≈Ü': '≈øi≈Ü',
        'nesi≈Ü': 'ne≈øi≈Ü',
        'ne·∫úi≈Ü': 'ne≈øi≈Ü',
        'pasi≈Ü': 'pa≈øi≈Ü',
        'pa·∫úi≈Ü': 'pa≈øi≈Ü',
        'nepasi≈Ü': 'nepa≈øi≈Ü',
        'nepa·∫úi≈Ü': 'nepa≈øi≈Ü',

        'zi≈Üa': '≈øi≈Üa',

        'meet': "weet",
        'nomeet': "noweet",
        'nemeet': "neweet",
        'ismeet': "isweet",
        'i≈ømeet': "i≈øweet",
        'sameet': "·∫úaweet",
        '·∫úameet': "·∫úaweet",
        
        'mehla': "wehla",
        'mehle·∫úch': "wehle·∫úch",

        'masar': 'wa·∫úar',
        'ma·∫úar': 'wa·∫úar',
        'pamasar': 'pawa·∫úar',
        'pama·∫úar': 'pawa·∫úar',

        "nemas": "nema≈ø",
        "nema·∫ú": "nema≈ø",
        "pamas": "pama≈ø",
        "pama·∫ú": "pama≈ø",
        "wisma·∫ú": "wisma≈ø",
        "wismas": "wisma≈ø",
        "wi·∫úma·∫ú": "wi·∫úma≈ø",
        "wi·∫úmas": "wi·∫úma≈ø",

        "bee·∫úch": "bee≈øch",
        "wisbee·∫úch": "wisbee≈øch",
        "wi·∫úbee·∫úch": "wi·∫úbee≈øch",

        "brih·∫úch": "brih≈øch",

    })
    exceptions(["winnes", "wines", "mission", "mi·∫ú·∫úion", "Marek", "marato", "bee·∫úchu"], vd_s_with, 1)
    add_letters("ds", "d≈ø", vd_s_with, prefixes, True)
    add_letters("mehl", "wehl", vd_s_with, ['jahno', 'jahee', 'jahpahr', 'jahpa', 'jahis', 'jahi≈ø', 'neno', 'neee', 'nepahr', 'Nepa', 'nepa', 'neis', 'nei≈ø', 'no', 'ee', 'pahr', 'wis', 'wi·∫ú', 'pa', 'is', 'i≈ø'], True)
    #pa taisno mehl-> wehl nevar, jo ir vƒÅrds mƒìle, kas traucƒì
    vd_e_with = {
        "S": "s",
            "s.": "ìêÆ",
        "·∫ú": "s",
            "ìêÆ": "s.",
        "lcs": "les",
        "pcs": "pes",
    }

    vd_x_with = {
            "ksembu": "ìêÆ",  #Luksemburga
            "k·∫úembu": "ìê≠",
            "ksemp": "ìê¨",   #eksemplƒÅrs
            "k·∫úemp": "ìê´",
            "semin": "ìê™",   #seminƒÅrs
            "·∫úemin": "ìê©",
            "Íû®emin": "ìê®",
            "semio": "ìêß",   #semiotika
            "·∫úemio": "ìê¶",
            "Íû®emio": "ìê•",
        "semm": "≈øem",
        "·∫úemm": "≈øem",
        "sem": "≈øem",
        "·∫úem": "≈øem",
            "ìêÆ": "k·∫úembu",
            "ìê≠": "k·∫úembu",
            "ìê¨": "k·∫úemp",
            "ìê´": "k·∫úemp",
            "ìê™": "·∫úemin",
            "ìê©": "·∫úemin",
            "ìê®": "Íû®emin",
            "ìêß": "·∫úemio",
            "ìê¶": "·∫úemio",
            "ìê•": "Íû®emio",

            "≈øemeen": "ìê§",
            "Semeen": "ìê£",
            "a≈Üehmeen": "ìê¢",
        "meen": "ween",
        "Meen": "Ween",
            "ìê§": "≈øemeen",
            "ìê£": "Semeen",
            "ìê¢": "a≈Üehmeen",

            "kreeme": "ìê°", #skriemelis
            "ikreem": "ìê†",
            "Ikreem": "ìêêìê´",
        "kreem": "kreew",
        "Kreem": "Kreew",
            "ìê°": "kreeme",
            "ìê†": "ikreem",
            "ìêêìê´": "Ikreem",
        "cet": "eet",
        "ssmezz": "·∫ú·∫úwezz",   #saulessveces, vissvecƒÅkais
        "alstsmezza": "alstswezza",        #valstsvecƒÅkais
        "cho gadd": "chogadd",
        "midd": "widd",
        "Midd": "Widd",
        "mid": "wid",
        "Mid": "Wid",
        "tecs": "tee·∫ú",
        "Tecs": "Tee·∫ú",
        "preck": "preek",
        "Preck": "Preek",
        "decn": "deen",
        "Decn": "Deen",
        'starp': '·∫útarp',
        'stahm': '·∫útahw',
        '·∫útahm': '·∫útahw',
        'Íû®tahm': 'Íû®tahw',
        'skol': '·∫úkol',
        'ƒºaik': 'laik',
        'ƒªaik': 'Laik',
        'teesa': 'tee·∫úa',
        'Teesa': 'Tee·∫úa',
        'stipr': '·∫útipr',    

	"cheijen": "chejeen",
	"chejen": "chejeen",
        'selt': '≈øelt',
        '·∫úelt': '≈øelt',
        'Íû®elt': 'Selt',
        
	    'sird': '·∫úird',
	    'reds': 'red≈ø',
	    'Reds': 'Red≈ø',
        'sahl': '·∫úahl',
        'sahk': '·∫úahk',
        'reis': 'rei≈ø',
        'Reis': 'Rei≈ø',
        'pilseht': 'pil·∫úeht',
        'Pilseht': 'Pil·∫úeht',
        'pagast': 'paga·∫út',
        'Pagast': 'Paga·∫út',
        'makar': 'wakar',
        'Makar': 'Wakar',
        'mal·∫ú': 'wal·∫ú',
        'mals': 'wal·∫ú',
        'Mal·∫ú': 'Wal·∫ú',
        'Mals': 'Wal·∫ú',
        'maig·∫ún': 'waig≈øn',
        'maigsn': 'waig≈øn', #zvaigznes
        'laikƒÅ': 'laik√¢',
        'LaikƒÅ': 'Laik√¢',
        'raud·∫úe': 'raud≈øe',
        'raudse': 'raud≈øe', #draudze
        'da·∫úch': 'da≈øch',
        'Da·∫úch': 'Da≈øch',
        "smezz": "·∫úmezz",
        "smez": "·∫úmez",
	"maldih": "waldih",
	"Maldih": "Waldih",
	"maldi·∫ú": "waldih·∫ú",
	"Maldi·∫ú": "Waldih·∫ú",
	"maldih·∫ú": "waldih·∫ú",
	"Maldih·∫ú": "Waldih·∫ú",
    "d≈øihm": "d≈øihw",
    "D≈øihm": "D≈øihw",
    "maijag": "waijag",
    "Maijag": "Waijag",
    "maijad": "waijad",
    "Maijad": "Waijad",
    "mi·∫úch": "wi≈øch",
    "mi≈øch": "wi≈øch",
    "wi·∫úch": "wi≈øch",
    "meegl": "weegl",
    "Meegl": "Weegl",
    "maise": "mai≈øe",
    "Maise": "Mai≈øe",
    "le≈øu": "Je≈øu",
    "lesu": "Je≈øu",
    "le·∫úu": "Je≈øu",
    "Le≈øu": "Je≈øu",
    "Lesu": "Je≈øu",
    "Le·∫úu": "Je≈øu",
        "pagalm": "ìêë",
        "Pagalm": "ìêí",
    "galm": "galw",
    "Galm": "Galw",
        "ìêë": "pagalm",
        "ìêí": "Pagalm",
    "alla·∫úch": "alla≈øch",
    "Alla·∫úch": "Alla≈øch",
    "vck": "vek",
    "kugg": "kuƒ£",
    "roi≈Ü≈Ü": "wi≈Ü≈Ü",
    "rvi≈Ü≈Ü": "wi≈Ü≈Ü",
    }
    exc_list = [
        "gods",    #godsirdƒ´gs
        "Gods",    #godsirdƒ´gs
        "sirds",   #sirdsapzi≈Üa
        "·∫úirds",   #sirdsapzi≈Üa
        "Íû®irds",   #sirdsapzi≈Üa
        "andsa",   #Sandsaka, Falklandsallas
        "rundsa",   #Brundsat
        "dsen",    # jo liela daƒºa ir vƒÅcu vai pilsƒìtu vƒÅrdi
        "Raudsep",
        "indsel",  #Grindsel, Rindsele,
        "gadsimt",
        "Gadsimt",
        "dson",     #Davidsons
        "·∫úmezz",   #Smecƒ´gs
        "·∫úmez",
        "Íû®mezz",
        "Íû®mez",
        "imitamezz",    # Zimitamezzias
        "imitamez",
        "ntermezzo",    # Intermezzo
        "ntermezo",
        "Mezza",
        "Meza",
        "ezzenah",      # mecanƒÅts
        "ezenah",
        "me·∫úchan",
    ]

    exceptions(exc_list, vd_x_with, 0)
    add_letters("me·∫úch", "me≈øch", vd_x_with)
    add_letters("Me·∫úch", "Me≈øch", vd_x_with)
    add_letters("ds", "d≈ø", vd_x_with, vowels)
    add_letters("mezz", "wezz", vd_x_with)
    add_letters("Mezz", "Wezz", vd_x_with)
    add_letters("mez", "wez", vd_x_with)
    add_letters("Mez", "Wez", vd_x_with)
    exceptions(exc_list, vd_x_with, 1)

    for key, val in vd0.items():
        text = text.replace(key, val)
    for key, val in {"S": "s"}.items():
        text = starts_ends_with(key, val, text, 2)

    for key, val in vd_s_e_with.items():
        text = starts_ends_with(key, val, text, 0)
    for key, val in vd_s_with.items():
        text = starts_ends_with(key, val, text, 1)
    for key, val in {"wi·∫ú·∫ú": "wi·∫ús", "wi·∫ú": "wis"}.items():
        text = starts_ends_with(key, val, text, 0)
    for key, val in vd_e_with.items():
        text = starts_ends_with(key, val, text, 2)
    for key, val in vd_x_with.items():
        text = text.replace(key, val)

    return text